# Стек (Stack) - это абстрактная структура данных, которая управляет последовательностью элементов согласно принципу
# "последний вошел, первый вышел" (Last-In-First-Out, LIFO).
# Основная идея стека - это предоставление доступа только к последнему введенному элементу.
# Вот некоторые типичные сценарии, когда стек может быть полезен:
# 1. **Реализация рекурсии**: Стек используется во многих языках программирования для выполнения рекурсивных функций.
# Каждый вызов функции помещает текущее состояние в стек, а затем извлекает его для завершения выполнения.
# 2. **Управление вызовами функций**: Стек вызовов используется для хранения информации о вызванных функциях,
# включая их локальные переменные и адрес возврата. Это позволяет программе вернуться к правильной точке после завершения вызова функции.
# 3. **Работа с выражениями**: Стек может использоваться для вычисления арифметических выражений
# в инфиксной, постфиксной или префиксной нотации.
# 4. **Обработка браузерной истории**: В браузерах стек используется для отслеживания истории
# переходов между веб-страницами (например, кнопки "назад" и "вперед").
# 5. **Управление операциями отмены/повтора**: Стек может использоваться для хранения последовательности
# действий пользователя, чтобы можно было выполнить отмену (Undo) или повторить (Redo) эти действия.
# 6. **Вызов обработчиков событий**: В многопоточных приложениях, стек может использоваться
# для управления вызовами обработчиков событий и сохранения их контекста.
# 7. **Реализация алгоритмов и структур данных**: Многие алгоритмы и структуры данных, такие
# как глубокое копирование (deep copy), проверка сбалансированности скобок, поиск в глубину (DFS) и другие, используют стеки.

class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.insert(0, item)

    def pop(self):
        if self.stack is not None:
            self.stack.pop()
        else:
            raise IndexError("Стек пустой")

    def peek(self):
        if self.stack is not None:
            return self.stack[0]
        else:
            raise IndexError("Стек пустой")

    def isempty(self):
        if self.stack is None:
            return True
        else:
            return False

    def size(self):
        return len(self.stack)

stack1 = Stack()
stack1.push(1)
stack1.push(2)
stack1.push(3)
print(stack1.stack)
stack1.pop()
print(stack1.stack)
print(stack1.size())